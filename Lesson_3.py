# -*- coding: utf-8 -*-
"""Копия 2.3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckpt4Wdw_gzuF8bpy46rIZ-2QijoOxzY
"""

from math import factorial
import numpy as np
import math

print('Задание 1.')

# Даны значения зарплат из выборки выпускников: 100, 80, 75, 77, 89, 33, 45, 25,
# 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150. Посчитать (желательно без
# использования статистических методов наподобие std, var, mean) среднее
# арифметическое, среднее квадратичное отклонение, смещенную и несмещенную оценки
# дисперсий для данной выборки.

salary = [100, 80, 75, 77, 89, 33, 54, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150]

average = sum(salary)/len(salary)

print('Среднее арифметическое зарплат выпускников, вычисление вручную:', average)

print('Среднее арифметическое зарплат выпускников, функция Python:', np.average(salary))

def disper(salary):
  disp = []
  for i in salary:
    disp.append((i - average) ** 2)
  return sum(disp)/len(disp)

print('Несмещенная оценка дисперсии, вычисление вручную:', "{:.2f}".format(disper(salary)))

print('Несмещенная оценка дисперсии, функция Python:', "{:.2f}".format(np.var(salary)))

def disper(salary):
  disp = []
  for i in salary:
    disp.append((i - average) ** 2)
  return sum(disp)/(len(disp) - 1)

print('Смещенная оценка дисперсии:', "{:.2f}".format(disper(salary)))

def statdisp(salary):
  disp = []
  for i in salary:
    disp.append((i - average) ** 2)
  return np.sqrt(sum(disp)/len(disp))

print('Среднее квадратичное отклонение, вычисление вручную:', "{:.2f}".format(statdisp(salary)))

print('Среднее квадратичное отклонение, функция Python:', "{:.2f}".format(np.std(salary)))

print('Задание 2.')

# В первом ящике находится 8 мячей, из которых 5 - белые. Во втором ящике - 12
# мячей, из которых 5 белых. Из первого ящика вытаскивают случайным образом два
# мяча, из второго - 4. Какова вероятность того, что 3 мяча белые?

# Задание можно решить методом сочетаний:

def balls(n1, n2, m, k1, k2, k3):
  black1 = n1 - m
  black2 = n2 - m
  C1 = factorial(black1) / (factorial(k1) * factorial(black1 - k1))
  C2 = factorial(n1)/(factorial(k1) * factorial(n1 - k1))
  C3 = factorial(m) / (factorial(black1) * factorial(m - black1))
  C4 = factorial(black2) / (factorial(k2) * factorial(black2 - k2))
  C5 = factorial(n2) / (factorial(k3) * factorial(n2 - k3))
  C6 = factorial(m)/(factorial(k1) * factorial(m - k1))
  C7 = factorial(black2) / (factorial(black1) * factorial(black2 - black1))
  C8 = factorial(m) / (factorial(k2) * factorial(m - k2))
  C9 = factorial(black1)/(factorial(k2) * factorial(black1 - k2))
  C10 = factorial(black2) / (factorial(k1) * factorial(black2 - k1))
 
  B1 =  C1 / C2 * (C3 * C4) / C5
  B2 = C6 / C2 * (C7 * C8) / C5
  B3 = (C8 * C9) / C2 * (C6 * C10) / C5

  return B1 + B2 + B3

print('Вероятность того, что три мяча окажутся белыми:', "{:.3f}".format(balls(8, 12, 5, 2, 1, 4)))

print('Задание 3.')

# На соревновании по биатлону один из трех спортсменов стреляет и попадает в
# мишень. Вероятность попадания для первого спортсмена равна 0.9, для второго — 0.8,
# для третьего — 0.6. Найти вероятность того, что выстрел произведен:
# a). первым спортсменом
# б). вторым спортсменом
# в). третьим спортсменом.

# Вероятность можно вычислить по формуле Байеса для каждой отдельной выборки:

def shot(s):
  """chances = вероятность произведения выстрела каждым из спортсменов"""
  chances = 1 / 3
  return chances * s

print('Вероятность, что выстрел был произведен первым спортсменом:', "{:.3f}".format(shot(0.9)))
print('Вероятность, что выстрел был произведен вторым спортсменом:', "{:.3f}".format(shot(0.8)))
print('Вероятность, что выстрел был произведен третьим спортсменом:', "{:.3f}".format(shot(0.6)))

print('Задание 4.')

# В университет на факультеты A и B поступило равное количество студентов, а на
# факультет C студентов поступило столько же, сколько на A и B вместе. Вероятность
# того, что студент факультета A сдаст первую сессию, равна 0.8. Для студента
# факультета B эта вероятность равна 0.7, а для студента факультета C - 0.9.
# Студент сдал первую сессию. Какова вероятность, что он учится:
# a). на факультете A
# б). на факультете B
# в). на факультете C?

# Задачу можно решить по формуле Байеса для каждой выборки. В случае с факультетом
# С результат удваивается, так как в двух предыдущих выборках количество объектов
# равное, а в выборке С вдвое больше, следовательно вероятность возрастает в два раза.

def student(s):
  faculty = 1 / 3
  return faculty * s

faculty_A = student(0.8)
faculty_B = student(0.7)
faculty_C = student(0.9 * 2)

print('Студент учится на факультете А с вероятностью', "{:.3f}".format(faculty_A))
print('Студент учится на факультете В с вероятностью', "{:.3f}".format(faculty_B))
print('Студент учится на факультете С с вероятностью', "{:.3f}".format(faculty_C))

print('Задание 5.')

# Устройство состоит из трех деталей. Для первой детали вероятность выйти из
# строя в первый месяц равна 0.1, для второй - 0.2, для третьей - 0.25. Какова
# вероятность того, что в первый месяц выйдут из строя:
# а). все детали
# б). только две детали
# в). хотя бы одна деталь
# г). от одной до двух деталей?

# а) Первые события совместные, поэтому справедливо умножение вероятностей:

def detail(d1, d2, d3):
  return d1 * d2 * d3

# б) Следующие события несовместны, поэтому вероятности складываются:

def detail_2(d1, d2, d3):
  return d1 * d2 * (1 - d3) + d1 * (1 - d2) * d3 + (1 - d1) * d2 * d3

# в) Событие можно вычислить из разности единицы и обратной вероятности:

def detail_3(d1, d2, d3):
  return 1 - ((1 - d1) * (1 - d2) * (1 - d3))

# г) В этом случае можно сложить вероятность выхода из строя одной и двух деталей:
def detail_4(d1, d2, d3):
  return (d1 * (1 - d2) * (1 - d3) + (1 - d1) * (1 - d2) * d3 + (1 - d1) * d2 * (1 - d3)) + (d1 * d2 * (1 - d3) + d1 * (1 - d2) * d3 + (1 - d1) * d2 * d3)

Detail = detail(0.1, 0.2, 0.25)
Detail_2 = detail_2(0.1, 0.2, 0.25)
Detail_3 = detail_3(0.1, 0.2, 0.25)
Detail_4 = detail_4(0.1, 0.2, 0.25)

print('Все детали выйдут из строя в первый месяц с вероятностью', "{:.3f}".format(Detail))

print('Только две детали выйдут из строя в первый месяц с вероятностью', "{:.3f}".format(Detail_2))

print('Не менее одной детали выйдет из строя в первый месяц с вероятностью', "{:.3f}".format(Detail_3))

print('От одной до двух деталей выйдет из строя в первый месяц с вероятностью', "{:.3f}".format(Detail_4))